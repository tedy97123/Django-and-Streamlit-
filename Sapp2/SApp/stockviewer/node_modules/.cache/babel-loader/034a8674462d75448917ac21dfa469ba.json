{"ast":null,"code":"/* Trie Data Structure */\nclass Node {\n  constructor() {\n    this.keys = new Map();\n    this.end = false;\n\n    this.setEnd = function () {\n      this.end = true;\n    };\n\n    this.isEnd = function () {\n      return this.end;\n    };\n  }\n\n}\n\nclass Trie {\n  constructor() {\n    this.root = new Node();\n\n    this.add = function (input) {\n      let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root;\n\n      if (input.length == 0) {\n        node.setEnd();\n        return;\n      } else if (!node.keys.has(input[0])) {\n        node.keys.set(input[0], new Node());\n        return this.add(input.substr(1), node.keys.get(input[0]));\n      } else {\n        return this.add(input.substr(1), node.keys.get(input[0]));\n      }\n\n      ;\n    };\n\n    this.isWord = function (word) {\n      let node = this.root;\n\n      while (word.length > 1) {\n        if (!node.keys.has(word[0])) {\n          return false;\n        } else {\n          node = node.keys.get(word[0]);\n          word = word.substr(1);\n        }\n\n        ;\n      }\n\n      ;\n      return node.keys.has(word) && node.keys.get(word).isEnd() ? true : false;\n    };\n\n    this.print = function () {\n      let words = new Array();\n\n      let search = function (node, string) {\n        if (node.keys.size != 0) {\n          for (let letter of node.keys.keys()) {\n            search(node.keys.get(letter), string.concat(letter));\n          }\n\n          ;\n\n          if (node.isEnd()) {\n            words.push(string);\n          }\n\n          ;\n        } else {\n          string.length > 0 ? words.push(string) : void 0;\n          return;\n        }\n\n        ;\n      };\n\n      search(this.root, new String());\n      return words.length > 0 ? words : '';\n    };\n  }\n\n}\n/* let myTrie = new Trie()\r\nmyTrie.add('ball'); \r\nmyTrie.add('bat'); \r\nmyTrie.add('doll'); \r\nmyTrie.add('dork'); \r\nmyTrie.add('do'); \r\nmyTrie.add('dorm')\r\nmyTrie.add('send')\r\nmyTrie.add('sense')\r\nconsole.log(myTrie.isWord('doll'))\r\nconsole.log(myTrie.isWord('dor'))\r\nconsole.log(myTrie.isWord('dorf'))\r\nconsole.log(myTrie.print()) */\n/// Example\n\n/*                 \r\n    for (let i = 0; i < response['item'].length; i++)\r\n    {\r\n        console.log(response['item'][i])  \r\n        T.add(response['item'][i]['description'])\r\n            T.add(response['item'][i]['link']) \r\n            T.add(response['item'][i]['title']) \r\n        \r\n    }\r\n        console.log(T.print())\r\n    }); \r\n*/\n\n\nexport { Trie };","map":{"version":3,"names":["Node","constructor","keys","Map","end","setEnd","isEnd","Trie","root","add","input","node","length","has","set","substr","get","isWord","word","print","words","Array","search","string","size","letter","concat","push","String"],"sources":["C:/Users/secre/SApp/stockviewer/src/Data_Structure/trie.js"],"sourcesContent":["/* Trie Data Structure */\r\n\r\nclass Node {\r\n    constructor() {\r\n        this.keys = new Map();\r\n        this.end = false;\r\n        this.setEnd = function () {\r\n            this.end = true;\r\n        };\r\n        this.isEnd = function () {\r\n            return this.end;\r\n        };\r\n    }\r\n}\r\n\r\nclass Trie {\r\n    constructor() {\r\n\r\n        this.root = new Node();\r\n\r\n        this.add = function (input, node = this.root) {\r\n            if (input.length == 0) {\r\n                node.setEnd();\r\n                return;\r\n            } else if (!node.keys.has(input[0])) {\r\n                node.keys.set(input[0], new Node());\r\n                return this.add(input.substr(1), node.keys.get(input[0]));\r\n            } else {\r\n                return this.add(input.substr(1), node.keys.get(input[0]));\r\n            };\r\n        };\r\n\r\n        this.isWord = function (word) {\r\n            let node = this.root;\r\n            while (word.length > 1) {\r\n                if (!node.keys.has(word[0])) {\r\n                    return false;\r\n                } else {\r\n                    node = node.keys.get(word[0]);\r\n                    word = word.substr(1);\r\n                };\r\n            };\r\n            return (node.keys.has(word) && node.keys.get(word).isEnd()) ?\r\n                true : false;\r\n        };\r\n\r\n        this.print = function () {\r\n            let words = new Array();\r\n            let search = function (node, string) {\r\n                if (node.keys.size != 0) {\r\n                    for (let letter of node.keys.keys()) {\r\n                        search(node.keys.get(letter), string.concat(letter));\r\n                    };\r\n                    if (node.isEnd()) {\r\n                        words.push(string);\r\n                    };\r\n                } else {\r\n                    string.length > 0 ? words.push(string) : void 0;\r\n                    return;\r\n                };\r\n            };\r\n            search(this.root, new String());\r\n            return words.length > 0 ? words : '';\r\n        };\r\n\r\n    }\r\n}\r\n\r\n/* let myTrie = new Trie()\r\nmyTrie.add('ball'); \r\nmyTrie.add('bat'); \r\nmyTrie.add('doll'); \r\nmyTrie.add('dork'); \r\nmyTrie.add('do'); \r\nmyTrie.add('dorm')\r\nmyTrie.add('send')\r\nmyTrie.add('sense')\r\nconsole.log(myTrie.isWord('doll'))\r\nconsole.log(myTrie.isWord('dor'))\r\nconsole.log(myTrie.isWord('dorf'))\r\nconsole.log(myTrie.print()) */\r\n\r\n                            /// Example\r\n/*                 \r\n    for (let i = 0; i < response['item'].length; i++)\r\n    {\r\n        console.log(response['item'][i])  \r\n        T.add(response['item'][i]['description'])\r\n            T.add(response['item'][i]['link']) \r\n            T.add(response['item'][i]['title']) \r\n        \r\n    }\r\n        console.log(T.print())\r\n    }); \r\n*/\r\n\r\nexport {Trie} ; "],"mappings":"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"},"metadata":{},"sourceType":"module"}