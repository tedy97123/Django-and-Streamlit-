{"ast":null,"code":"import React from 'react';\nimport { createChart } from 'lightweight-charts';\nimport { request } from 'websocket';\n\nlet AlpacaConnection = async (socket, getcrypto, unsub, resetunsub) => {\n  let crypto = getcrypto();\n  const API_SECRET = 'twc7um8XPrlI9jseEnoxcS3WtAbMxKUnY5T0E1OQ';\n  const API_KEY_ID = 'AKWGZ0SY08G1FN795SGN';\n  let prev_crypto = {\n    \"action\": \"prev_crypto\",\n    \"trades\": [crypto],\n    \"quotes\": [crypto],\n    \"bars\": [crypto]\n  };\n  const auth = {\n    \"action\": \"auth\",\n    \"key\": API_KEY_ID,\n    \"secret\": API_SECRET\n  };\n  let subscribe = {\n    \"action\": \"subscribe\",\n    \"trades\": [crypto],\n    \"quotes\": [crypto],\n    \"bars\": [crypto]\n  };\n  const news_subscription = {\n    \"action\": \"subscribe\",\n    \"news\": [crypto]\n  };\n  let quotesElement = document.getElementById('quote');\n  let tradesElement = document.getElementById('trade');\n  let SymbolElement = document.getElementById('symbol');\n  let pending_Close = false;\n  let start = new Date(Date.now() - 7200 * 1000).toISOString();\n  let key = [];\n  let currentBar = [];\n  let trades = [];\n  let message;\n  let chart = createChart(document.getElementById('chart'), {\n    width: 1000,\n    height: 700,\n    layout: {\n      backgroundColor: '#50575e',\n      textColor: '#ffffff'\n    },\n    grid: {\n      vertLines: {\n        color: '#404040'\n      },\n      horzLines: {\n        color: '#404040'\n      }\n    },\n    priceScale: {\n      borderColor: '#cccccc'\n    },\n    timeScale: {\n      borderColor: '#cccccc',\n      timeVisible: true\n    }\n  });\n  let chartchildren = document.getElementById('chart').childNodes;\n\n  if (chartchildren.length > 2) {\n    let last_chart = chartchildren[chartchildren.length - 2];\n    last_chart.classList.add('hidden');\n  }\n\n  let candleSeries = chart.addCandlestickSeries();\n  /*     console.log(start); */\n\n  var bars_url = `https://data.alpaca.markets/v1beta1/crypto/bars?exchanges=CBSE&timeframe=1Min&start` + start;\n  let fetch_api = await fetch(bars_url, {\n    headers: {\n      'APCA-API-KEY-ID': API_KEY_ID,\n      'APCA-API-SECRET-KEY': API_SECRET\n    }\n  });\n  let response = await fetch_api.json();\n\n  if (response.bars !== null) {\n    const data_bars = response.bars.map(bar => ({\n      open: bar.o,\n      high: bar.h,\n      low: bar.l,\n      close: bar.c,\n      time: Date.parse(bar.t) / 1000\n    }));\n    currentBar = data_bars[data_bars.length - 1];\n    candleSeries.setData(data_bars);\n  } else {\n    console.log('No Data At the Moment');\n    let now = new Date(new Date(Date.now() - 7200 * 1000 * 3.5).toString());\n    now = now.getTime() / 1000;\n    currentBar = {\n      'time': now\n    };\n    let empty_bar = [{\n      o: 0,\n      h: 0,\n      l: 0,\n      c: 0,\n      t: now\n    }];\n    const data_bars = empty_bar.map(bar => ({\n      open: bar.o,\n      high: bar.h,\n      low: bar.l,\n      close: bar.c,\n      time: bar.t\n    }));\n    candleSeries.setData(data_bars);\n  }\n\n  socket.onmessage = event => {\n    let quit = unsub();\n\n    if (quit === true && pending_Close === false) {\n      console.log('Send prev_crypto Emitted');\n      socket.send(JSON.stringify(prev_crypto));\n      pending_Close = true;\n      console.log('Reset Unsub Status');\n      crypto = getcrypto();\n      subscribe = {\n        \"action\": \"subscribe\",\n        \"trades\": [crypto],\n        \"quotes\": [crypto],\n        \"bars\": [crypto]\n      };\n      socket.send(JSON.stringify(subscribe));\n    }\n\n    let data = JSON.parse(event.data); //console.log(data)\n    //console.log(data)\n    //console.log ( 'we in bby')\n\n    if (data[0]['msg'] == 'connected') {\n      message = 'connected';\n      return socket.send(JSON.stringify(auth));\n    }\n\n    ;\n\n    if (data[0]['msg'] == 'authenticated') {\n      socket.send(JSON.stringify(subscribe));\n      return message = 'authenticated';\n    }\n\n    for (let key in data) {\n      let arr = [];\n      let keys = Object.keys(data);\n      /* console.log(keys,'keys') */\n\n      const type = data[key].T;\n\n      if (type == '') {\n        //console.log(data[key]);\n        let do_nothing;\n      }\n\n      if (type == 'q') {\n        /*   console.log(data[key]);  */\n        const quoteElement = document.createElement('div');\n        quoteElement.className = 'quote';\n        quoteElement.innerHTML = `<b style=\"color: green\">${data[key].t}</b> <b style='color:red'>Bid Price</b> ${data[key].bp} <b style='color:red'>Ask Price</b> ${data[key].ap}`;\n        quotesElement.appendChild(quoteElement);\n        let elements = document.getElementsByClassName('quote');\n\n        if (elements.length > 25) {\n          quotesElement.removeChild(elements[0]);\n        }\n      }\n\n      if (type == 't') {\n        console.log(data);\n        const tradeElement = document.createElement('div');\n        tradeElement.className = 'trade';\n        tradeElement.innerHTML = `<b style=\"color: green\">${data[key].t}</b>  <b style='color:red'>Trade Price</b>${data[key].p}   <b style='color:red'>Trade Size</b> ${data[key].s}`;\n        tradesElement.appendChild(tradeElement);\n        let elements = document.getElementsByClassName('trade');\n\n        if (elements.length > 25) {\n          tradesElement.removeChild(elements[0]);\n        }\n\n        trades.push(data[key].p);\n        let open = trades[0];\n        let high = Math.max(...trades);\n        let low = Math.min(...trades);\n        let close = trades[trades.length - 1];\n        candleSeries.update({\n          time: currentBar.time + 60,\n          open: open,\n          high: high,\n          low: low,\n          close: close\n        }); //console.log('After first update')\n\n        trades = [];\n      }\n\n      if (type == 'b' && data[key].x == 'CBSE') {\n        let bar = data[key];\n        /*                console.log(bar.t,typeof(bar.t))\r\n                       console.log('\\n\\n GOT BAR DATA \\n\\n')  */\n\n        let timestamp = new Date(bar.t).getTime() / 1000;\n        currentBar = {\n          time: timestamp,\n          open: bar.o,\n          high: bar.h,\n          low: bar.l,\n          close: bar.c\n        };\n        candleSeries.update(currentBar);\n      }\n    }\n  };\n};\n\n_c = AlpacaConnection;\nexport default AlpacaConnection;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlpacaConnection\");","map":{"version":3,"names":["React","createChart","request","AlpacaConnection","socket","getcrypto","unsub","resetunsub","crypto","API_SECRET","API_KEY_ID","prev_crypto","auth","subscribe","news_subscription","quotesElement","document","getElementById","tradesElement","SymbolElement","pending_Close","start","Date","now","toISOString","key","currentBar","trades","message","chart","width","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","borderColor","timeScale","timeVisible","chartchildren","childNodes","length","last_chart","classList","add","candleSeries","addCandlestickSeries","bars_url","fetch_api","fetch","headers","response","json","bars","data_bars","map","bar","open","o","high","h","low","l","close","c","time","parse","t","setData","console","log","toString","getTime","empty_bar","onmessage","event","quit","send","JSON","stringify","data","arr","keys","Object","type","T","do_nothing","quoteElement","createElement","className","innerHTML","bp","ap","appendChild","elements","getElementsByClassName","removeChild","tradeElement","p","s","push","Math","max","min","update","x","timestamp"],"sources":["C:/Users/secre/SApp/stockviewer/src/components/Stock_Streamer.jsx"],"sourcesContent":["import React from 'react';\r\nimport {createChart } from 'lightweight-charts';\r\nimport { request } from 'websocket';\r\n \r\nlet AlpacaConnection = async (socket,getcrypto,unsub,resetunsub) =>\r\n{\r\n\r\n    let crypto = getcrypto()\r\n    const API_SECRET = 'twc7um8XPrlI9jseEnoxcS3WtAbMxKUnY5T0E1OQ'\r\n    const API_KEY_ID = 'AKWGZ0SY08G1FN795SGN'; \r\n    let prev_crypto = {\"action\":\"prev_crypto\",\"trades\":[crypto],\"quotes\":[crypto],\"bars\":[crypto]}\r\n    const auth = {\"action\": \"auth\", \"key\": API_KEY_ID, \"secret\": API_SECRET};\r\n\r\n    let subscribe = {\"action\":\"subscribe\",\"trades\":[crypto],\"quotes\":[crypto],\"bars\":[crypto]};\r\n    const news_subscription = {\"action\":\"subscribe\",\"news\":[crypto]}\r\n\r\n    let quotesElement = document.getElementById('quote');\r\n    let tradesElement = document.getElementById('trade');\r\n    let SymbolElement = document.getElementById('symbol');\r\n    let pending_Close = false\r\n\r\n    let start = new Date(Date.now() - (7200 * 1000)).toISOString();\r\n\r\n    let key = [];\r\n    let currentBar = [];\r\n    let trades = [];\r\n    let message \r\n\r\n    let chart = createChart(document.getElementById('chart'), \r\n    {\r\n        width: 1000,\r\n        height: 700,\r\n        layout: \r\n        {\r\n            backgroundColor: '#50575e',  \r\n            textColor: '#ffffff',\r\n        },\r\n        grid: \r\n        {\r\n            vertLines: \r\n            {\r\n                color: '#404040',\r\n            },\r\n            horzLines: \r\n            {\r\n                color: '#404040',\r\n            },\r\n        },\r\n    \r\n        priceScale: \r\n        {\r\n            borderColor: '#cccccc',\r\n        },\r\n        timeScale: \r\n        {\r\n            borderColor: '#cccccc',\r\n            timeVisible: true,\r\n        },\r\n    });    \r\n    let chartchildren = document.getElementById('chart').childNodes\r\n\r\n    if(chartchildren.length > 2){\r\n        let last_chart = chartchildren[chartchildren.length-2]\r\n        last_chart.classList.add('hidden')\r\n         \r\n    }\r\n\r\n    let candleSeries = chart.addCandlestickSeries();\r\n\r\n\r\n/*     console.log(start); */\r\n\r\n\r\n    var bars_url = `https://data.alpaca.markets/v1beta1/crypto/bars?exchanges=CBSE&timeframe=1Min&start` + start;\r\n\r\n    let fetch_api = await fetch(bars_url, \r\n    {\r\n        headers: \r\n        {\r\n            'APCA-API-KEY-ID': API_KEY_ID,\r\n            'APCA-API-SECRET-KEY': API_SECRET\r\n        }\r\n    })\r\n    \r\n    let response = await fetch_api.json()\r\n\r\n    \r\n  \r\n\r\n\r\n    if(response.bars !== null) \r\n        {\r\n            const data_bars = response.bars.map(bar => \r\n                (\r\n                    {\r\n                        open: bar.o,\r\n                        high: bar.h,\r\n                        low: bar.l,\r\n                        close: bar.c,\r\n                        time: Date.parse(bar.t) / 1000\r\n                    }\r\n                ));\r\n        \r\n                currentBar = data_bars[data_bars.length-1];\r\n        \r\n                candleSeries.setData(data_bars);\r\n                \r\n        }\r\n\r\n    else\r\n    {\r\n        console.log('No Data At the Moment')\r\n\r\n        let now = new Date(new Date(Date.now()-7200 * 1000*3.5).toString())\r\n        now = now.getTime()/1000\r\n        currentBar = {'time':now}\r\n        let empty_bar = [{o:0,h:0,l:0,c:0,t:now}]\r\n        const data_bars = empty_bar.map(bar => \r\n            (\r\n                {\r\n                    open: bar.o,\r\n                    high: bar.h,\r\n                    low: bar.l,\r\n                    close: bar.c,\r\n                    time: bar.t\r\n                }\r\n            ));\r\n        candleSeries.setData(data_bars)\r\n    }\r\n\r\n    socket.onmessage = (event) =>\r\n    {\r\n\r\n        let quit = unsub()\r\n        if (quit === true && pending_Close === false){\r\n            console.log('Send prev_crypto Emitted')\r\n            socket.send(JSON.stringify(prev_crypto))\r\n            pending_Close = true\r\n            console.log('Reset Unsub Status')\r\n            crypto = getcrypto()\r\n            subscribe = {\"action\":\"subscribe\",\"trades\":[crypto],\"quotes\":[crypto],\"bars\":[crypto]};\r\n            socket.send(JSON.stringify(subscribe))\r\n            \r\n        }\r\n        let data = JSON.parse(event.data);\r\n        //console.log(data)\r\n        //console.log(data)\r\n            \r\n        //console.log ( 'we in bby')\r\n\r\n        if (data[0]['msg']  == 'connected')\r\n        {\r\n            message = 'connected'\r\n            return socket.send(JSON.stringify(auth));\r\n        };\r\n\r\n        if (data[0]['msg'] == 'authenticated')\r\n        {\r\n            socket.send(JSON.stringify(subscribe));\r\n            return message = 'authenticated'\r\n        }\r\n        for (let key in data)\r\n        {\r\n            let arr = []\r\n            let keys = Object.keys(data)\r\n            /* console.log(keys,'keys') */\r\n\r\n            const type = data[key].T\r\n\r\n            if (type == '')\r\n            {\r\n                //console.log(data[key]);\r\n                let do_nothing\r\n            }\r\n            if (type == 'q')\r\n            {\r\n              /*   console.log(data[key]);  */  \r\n                const quoteElement = document.createElement('div');\r\n                quoteElement.className = 'quote';\r\n                quoteElement.innerHTML = `<b style=\"color: green\">${data[key].t}</b> <b style='color:red'>Bid Price</b> ${data[key].bp} <b style='color:red'>Ask Price</b> ${data[key].ap}`\r\n                quotesElement.appendChild(quoteElement);\r\n\r\n                let elements = document.getElementsByClassName('quote');\r\n                if (elements.length > 25) \r\n                {\r\n                    quotesElement.removeChild(elements[0]);\r\n                }\r\n            }\r\n            if (type == 't') \r\n            {\r\n                console.log(data)\r\n                const tradeElement = document.createElement('div');\r\n                tradeElement.className = 'trade';\r\n                tradeElement.innerHTML = `<b style=\"color: green\">${data[key].t}</b>  <b style='color:red'>Trade Price</b>${data[key].p}   <b style='color:red'>Trade Size</b> ${data[key].s}`\r\n                tradesElement.appendChild(tradeElement);\r\n\r\n                let elements = document.getElementsByClassName('trade');\r\n                if (elements.length > 25) \r\n                {\r\n                    tradesElement.removeChild(elements[0]);\r\n                }\r\n                trades.push(data[key].p);\r\n                \r\n                let open = trades[0];\r\n                let high = Math.max(...trades);\r\n                let low = Math.min(...trades);\r\n                let close = trades[trades.length - 1];\r\n\r\n                candleSeries.update(\r\n                {\r\n                    time: currentBar.time + 60,\r\n                    open: open,\r\n                    high: high,\r\n                    low: low,\r\n                    close: close\r\n                })\r\n                //console.log('After first update')\r\n                trades = [];\r\n            }\r\n\r\n                \r\n            if (type == 'b' && data[key].x == 'CBSE') \r\n            { \r\n                let bar = data[key];\r\n/*                console.log(bar.t,typeof(bar.t))\r\n               console.log('\\n\\n GOT BAR DATA \\n\\n')  */\r\n\r\n                let timestamp = new Date(bar.t).getTime() / 1000;\r\n                currentBar = \r\n                {\r\n                    time: timestamp,\r\n                    open: bar.o,\r\n                    high: bar.h,\r\n                    low: bar.l,\r\n                    close: bar.c\r\n                }\r\n                candleSeries.update(currentBar);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n            \r\n};\r\nexport default AlpacaConnection;\r\n \r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}